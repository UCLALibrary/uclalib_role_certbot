---

# Certbot installation packages:
certbot_install_pkgs:
  - "certbot"

# Certbot can be registered with a supported ACME account service
# This role supports Let's Encrypt or Sectigo
# Acceptable values for this varibale are:
# 1) letsencrypt
# 2) sectigo
certbot_reg_type: ""

# Path to certbot configuration and certificate files
certbot_baseconfig_path: "/etc/letsencrypt"

# Path to ACME account registration data
certbot_acme_accnt_path: ""

# ACME Account identification information
# Email, Server URL, Key ID, HMAC ID
acme_accnt_email: ""
acme_accnt_url: ""
acme_accnt_keyid: ""
acme_accnt_hmacid: ""

# Hash value representing a valid ACME Account
# within the /etc/letsencrypt directory structure
acme_accnt_hash: ""

# Private key json associated with the ACME Account
acme_accnt_priv_key_json: ""

# Set if a certificate request should be made (true/false)
certbot_make_cert_request: "false"

# Define the type of certificate request process to use (standard / haproxy)
certbot_request_type: "standard"

# Set if the system running certbot will have restricted access to http
# i.e. port 80 will not be world accessible
certbot_http_access_restricted: "false"

# Dictionary of certificates to request
certbot_certificates:
  certname1:
    domains: []
      # - example1.library.ucla.edu
      # - example2.library.ucla.edu
  certname2:
    domains: []
      # - example3.library.ucla.edu
      # - example4.library.ucla.edu
  certname3:
    domains: []
      # - example5.library.ucla.edu
      # - example6.library.ucla.edu

# OPTIONAL - Command to run after successful renewal of the certificate
# Example: "systemctl restart httpd"
certbot_renewhook: ""

# Certbot cron set-up parameters
certbot_cron_renew_user: "root"
certbot_cron_renew_hour: "0"
certbot_cron_renew_minute: "5"
certbot_cron_renew_command: >-
  sleep $(( RANDOM \% 3600 )) && /usr/local/bin/certbot_renew
